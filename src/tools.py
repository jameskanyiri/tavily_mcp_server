from mcp.types import Tool


def get_tavily_tools() -> list[Tool]:
    return [
        Tool(
            name="tavily_search",
            description="Use Tavily's advanced web search engine to retrieve relevant, up-to-date content from the internet. Supports filtering by topic, time range, and specific domains. Ideal for real-time information gathering, content discovery, and research.",
            inputSchema={
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "The search query.",
                    },
                    "search_depth": {
                        "type": "string",
                        "enum": ["basic", "advanced"],
                        "description": "The search depth. It can be 'basic' or 'advanced'.",
                        "default": "basic",
                    },
                    "topic": {
                        "type": "string",
                        "enum": ["general", "news"],
                        "description": "The category of the search. This will determine which tavily search agent will be used",
                        "default": "general",
                    },
                    "days": {
                        "type": "number",
                        "description": "Number of days back from the current date to include ( publish date ). Available only if topic is news.",
                        "default": 3,
                    },
                    "time_range": {
                        "type": "string",
                        "enum": ["day", "week", "month", "year", "d", "w", "m", "y"],
                        "description": "The time range back from the current date to filter results ( publish date ). Useful when looking for sources that have published data.",
                    },
                    "start_date": {
                        "type": "string",
                        "description": "Will return all results after the specified start date ( publish date ). Required to be written in the format YYYY-MM-DD",
                        "default": "",
                    },
                    "end_date": {
                        "type": "string",
                        "description": "Will return all results before the specified end date ( publish date ). Required to be written in the format YYYY-MM-DD",
                        "default": "",
                    },
                    "max_results": {
                        "type": "number",
                        "description": "The maximum number of search results to return.",
                        "default": 10,
                        "minimum": 5,
                        "maximum": 20,
                    },
                    "include_images": {
                        "type": "boolean",
                        "description": "Whether to include images in the search results.",
                        "default": False,
                    },
                    "include_image_descriptions": {
                        "type": "boolean",
                        "description": "Whether to include image descriptions in the search results.",
                        "default": False,
                    },
                    "include_raw_content": {
                        "type": "boolean",
                        "description": "Include the cleaned and parsed HTML content of each search result.",
                        "default": False,
                    },
                    "include_domains": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "A list of domains to specifically include in the search results. Maximum 300 domains.",
                        "default": [],
                    },
                    "exclude_domains": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "A list of domains to specifically exclude from the search results. Maximum 150 domains.",
                        "default": [],
                    },
                    "country": {
                        "type": "string",
                        "enum": [
                            "afghanistan",
                            "albania",
                            "algeria",
                            "andorra",
                            "angola",
                            "argentina",
                            "armenia",
                            "australia",
                            "austria",
                            "azerbaijan",
                            "bahamas",
                            "bahrain",
                            "bangladesh",
                            "barbados",
                            "belarus",
                            "belgium",
                            "belize",
                            "benin",
                            "bhutan",
                            "bolivia",
                            "bosnia and herzegovina",
                            "botswana",
                            "brazil",
                            "brunei",
                            "bulgaria",
                            "burkina faso",
                            "burundi",
                            "cambodia",
                            "cameroon",
                            "canada",
                            "cape verde",
                            "central african republic",
                            "chad",
                            "chile",
                            "china",
                            "colombia",
                            "comoros",
                            "congo",
                            "costa rica",
                            "croatia",
                            "cuba",
                            "cyprus",
                            "czech republic",
                            "denmark",
                            "djibouti",
                            "dominican republic",
                            "ecuador",
                            "egypt",
                            "el salvador",
                            "equatorial guinea",
                            "eritrea",
                            "estonia",
                            "ethiopia",
                            "fiji",
                            "finland",
                            "france",
                            "gabon",
                            "gambia",
                            "georgia",
                            "germany",
                            "ghana",
                            "greece",
                            "guatemala",
                            "guinea",
                            "haiti",
                            "honduras",
                            "hungary",
                            "iceland",
                            "india",
                            "indonesia",
                            "iran",
                            "iraq",
                            "ireland",
                            "israel",
                            "italy",
                            "jamaica",
                            "japan",
                            "jordan",
                            "kazakhstan",
                            "kenya",
                            "kuwait",
                            "kyrgyzstan",
                            "latvia",
                            "lebanon",
                            "lesotho",
                            "liberia",
                            "libya",
                            "liechtenstein",
                            "lithuania",
                            "luxembourg",
                            "madagascar",
                            "malawi",
                            "malaysia",
                            "maldives",
                            "mali",
                            "malta",
                            "mauritania",
                            "mauritius",
                            "mexico",
                            "moldova",
                            "monaco",
                            "mongolia",
                            "montenegro",
                            "morocco",
                            "mozambique",
                            "myanmar",
                            "namibia",
                            "nepal",
                            "netherlands",
                            "new zealand",
                            "nicaragua",
                            "niger",
                            "nigeria",
                            "north korea",
                            "north macedonia",
                            "norway",
                            "oman",
                            "pakistan",
                            "panama",
                            "papua new guinea",
                            "paraguay",
                            "peru",
                            "philippines",
                            "poland",
                            "portugal",
                            "qatar",
                            "romania",
                            "russia",
                            "rwanda",
                            "saudi arabia",
                            "senegal",
                            "serbia",
                            "singapore",
                            "slovakia",
                            "slovenia",
                            "somalia",
                            "south africa",
                            "south korea",
                            "south sudan",
                            "spain",
                            "sri lanka",
                            "sudan",
                            "sweden",
                            "switzerland",
                            "syria",
                            "taiwan",
                            "tajikistan",
                            "tanzania",
                            "thailand",
                            "togo",
                            "trinidad and tobago",
                            "tunisia",
                            "turkey",
                            "turkmenistan",
                            "uganda",
                            "ukraine",
                            "united arab emirates",
                            "united kingdom",
                            "united states",
                            "uruguay",
                            "uzbekistan",
                            "venezuela",
                            "vietnam",
                            "yemen",
                            "zambia",
                            "zimbabwe",
                        ],
                        "description": "Boost search results from a specific country. This will prioritize content from the selected country in the search results. Available only if topic is general. Country names MUST be written in lowercase, plain English, with spaces and no underscores.",
                        "default": "",
                    },
                    "include_favicon": {
                        "type": "boolean",
                        "description": "Include the favicon of the website in the search results.",
                        "default": False,
                    },
                },
                "required": ["query"],
            },
        ),
        Tool(
            name="tavily_extract",
            description="Extract web page content from one or more specified URLs using Tavily Extract.",
            inputSchema={
                "type": "object",
                "properties": {
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "A list of URLs to extract content from. Maximum 10 URLs.",
                    },
                    "include_images": {
                        "type": "boolean",
                        "description": "Include a list of images extracted from the URLs in the response.",
                        "default": False,
                    },
                    "include_favicon": {
                        "type": "boolean",
                        "description": "Whether to include the favicon URL for each result.",
                        "default": False,
                    },
                    "extract_depth": {
                        "type": "string",
                        "enum": ["basic", "advanced"],
                        "description": "Depth of extraction - 'basic' or 'advanced', if urls are linkedin use 'advanced' or if explicitly told to use advanced",
                        "default": "basic",
                    },
                    "format": {
                        "type": "string",
                        "enum": ["markdown", "text"],
                        "description": "The format of the extracted web page content. markdown returns content in markdown format. text returns plain text and may increase latency.",
                        "default": "markdown",
                    },
                },
                "required": ["urls"],
            },
        ),
        Tool(
            name="tavily_crawl",
            description="A powerful web crawler that initiates a structured web crawl starting from a specified base URL. The crawler expands from that point like a tree, following internal links across pages. You can control how deep and wide it goes, and guide it to focus on specific sections of the site.",
            inputSchema={
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The root URL to begin the crawl.",
                    },
                    "instructions": {
                        "type": "string",
                        "description": "Natural language instructions for the crawler.",
                    },
                    "max_depth": {
                        "type": "integer",
                        "description": "Max depth of the crawl. Defines how far from the base URL the crawler can explore.",
                        "default": 1,
                        "minimum": 1,
                    },
                    "max_breadth": {
                        "type": "integer",
                        "description": "Max number of links to follow per level of the tree (i.e., per page).",
                        "default": 20,
                        "minimum": 1,
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Total number of links the crawler will process before stopping.",
                        "default": 50,
                        "minimum": 1,
                    },
                    "select_paths": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to select only URLs with specific path patterns (e.g., /docs/.*, /api/v1.*)",
                        "default": [],
                    },
                    "exclude_paths": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to exclude URLs with specific path patterns (e.g., /private/.*, /admin/.*).",
                        "default": [],
                    },
                    "select_domains": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to select crawling to specific domains or subdomains (e.g., ^docs\\.example\\.com$)",
                        "default": [],
                    },
                    "exclude_domains": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to exclude specific domains or subdomains from crawling (e.g., ^private\.example\.com$).",
                        "default": [],
                    },
                    "allow_external": {
                        "type": "boolean",
                        "description": "Whether to include external domain links in the final results list.",
                        "default": True,
                    },
                    "include_images": {
                        "type": "boolean",
                        "description": "Whether to include images in the crawl results.",
                        "default": False,
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Careers",
                                "Blog",
                                "Documentation",
                                "About",
                                "Pricing",
                                "Community",
                                "Developers",
                                "Contact",
                                "Media",
                            ],
                        },
                        "description": "Filter URLs using predefined categories like documentation, blog, api, etc",
                        "default": [],
                    },
                    "extract_depth": {
                        "type": "string",
                        "enum": ["basic", "advanced"],
                        "description": "Depth of extraction - 'basic' or 'advanced', if urls are linkedin use 'advanced' or if explicitly told to use advanced",
                        "default": "basic",
                    },
                    "format": {
                        "type": "string",
                        "enum": ["markdown", "text"],
                        "description": "The format of the extracted web page content. markdown returns content in markdown format. text returns plain text and may increase latency.",
                        "default": "markdown",
                    },
                    "include_favicon": {
                        "type": "boolean",
                        "description": "Whether to include the favicon URL for each result",
                        "default": False,
                    },
                },
                "required": ["url"],
            },
        ),
        Tool(
            name="tavily_map",
            description="A powerful web mapping tool that creates a structured map of website URLs, allowing you to discover and analyze site structure, content organization, and navigation paths. Perfect for site audits, content discovery, and understanding website architecture.",
            inputSchema={
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "The root URL to begin the mapping.",
                    },
                    "instructions": {
                        "type": "string",
                        "description": "Natural language instructions for the crawler. ",
                    },
                    "max_depth": {
                        "type": "integer",
                        "description": "Max depth of the crawl. Defines how far from the base URL the crawler can explore.",
                        "default": 1,
                        "minimum": 1,
                    },
                    "max_breadth": {
                        "type": "integer",
                        "description": "Max number of links to follow per level of the tree (i.e., per page).",
                        "default": 20,
                        "minimum": 1,
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Total number of links the crawler will process before stopping.",
                        "default": 50,
                        "minimum": 1,
                    },
                    "select_paths": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to select only URLs with specific path patterns (e.g., /docs/.*, /api/v1.*)",
                        "default": [],
                    },
                    "exclude_paths": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to exclude URLs with specific path patterns (e.g., /private/.*, /admin/.*).",
                        "default": [],
                    },
                    "select_domains": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to select crawling to specific domains or subdomains (e.g., ^docs\\.example\\.com$)",
                        "default": [],
                    },
                    "exclude_domains": {
                        "type": "array",
                        "items": {
                            "type": "string",
                        },
                        "description": "Regex patterns to exclude specific domains or subdomains from crawling (e.g., ^private\\.example\\.com$).",
                        "default": [],
                    },
                    "allow_external": {
                        "type": "boolean",
                        "description": "Whether to include external domain links in the final results list.",
                        "default": True,
                    },
                    "categories": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "Careers",
                                "Blog",
                                "Documentation",
                                "About",
                                "Pricing",
                                "Community",
                                "Developers",
                                "Contact",
                                "Media",
                            ],
                        },
                        "description": "Filter URLs using predefined categories like documentation, blog, api, etc",
                        "default": [],
                    }
                },
                "required": ["url"],
            },
        )
    ]
